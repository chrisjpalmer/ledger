// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Ledger API
 *
 * This is the API for the ledger backend.
 *
 * API version: 0.0.1
 */

package openapi


import (
	"errors"
)



type Expense struct {

	Name string `json:"name"`

	Amount float32 `json:"amount"`

	Date string `json:"date"`

	Paid bool `json:"paid"`
}

// AssertExpenseRequired checks if the required fields are not zero-ed
func AssertExpenseRequired(obj Expense) error {
	elements := map[string]interface{}{
		"name": obj.Name,
		"amount": obj.Amount,
		"date": obj.Date,
		"paid": obj.Paid,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertExpenseConstraints checks if the values respects the defined constraints
func AssertExpenseConstraints(obj Expense) error {
	if obj.Amount < 0 {
		return &ParsingError{Param: "Amount", Err: errors.New(errMsgMinValueConstraint)}
	}
	return nil
}
